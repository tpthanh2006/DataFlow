import { FormLayout } from "@/components/form/Form";
import { useAppForm } from "@/hooks/formHook";
import {
  FormCreationBackButton,
  FormCreationButtons,
  FormCreationContent,
  FormCreationHeading,
  FormCreationInfo,
  FormCreationSubmitButton,
} from "@/components/formCreation/FormCreation";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { SquareCheckBig } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { useNavigate } from "react-router-dom";
import type {
  FormCreationState,
  UseFormCreationStore,
} from "@/lib/FormCreationStore";
import {
  type FieldSelection as FieldSelectionType,
  fieldSelectionSchema,
} from "@shared/schema/formCreationSchemas";
import type { FormField } from "@shared/schema/schema";
import { useFields } from "@/hooks/formCreation/getFields";

// TODO: In the future, we get our fields from targetTable selected during Data Source step
// OR from some hook :)
// This hook should probably filter out autogenerated field options into some separate
// list like "autoGeneratedFieldOptions"

type FieldSelectionProps<TState extends FormCreationState> = {
  previousRoute: string;
  nextRoute: string;
  useFormCreationStore: UseFormCreationStore<TState>;
};

export const FieldSelection = ({
  previousRoute,
  nextRoute,
  useFormCreationStore,
}: FieldSelectionProps<FormCreationState>) => {
  const name = useFormCreationStore((state) => state.name);
  const selectedFields = useFormCreationStore((state) => state.selectedFields);
  const setData = useFormCreationStore((state) => state.setData);
  const navigate = useNavigate();
  // Target table should always be defined by the time we reach here (otherwise we wouldve redirected)
  const fields = useFormCreationStore((state) => state.targetTable?.fields);
  const { fieldOptions, unsupportedFields } = useFields(fields);

  const defaultValues: FieldSelectionType = {
    selectedFields: selectedFields || [],
  };

  const form = useAppForm({
    defaultValues: defaultValues,
    onSubmit: ({ value }) => {
      console.log(value);
      setData(value);
      navigate(nextRoute);
    },
    validators: {
      onSubmit: fieldSelectionSchema,
    },
  });

  return (
    <FormCreationContent>
      <FormCreationHeading>
        {/* Heading and Save Status Indicator */}
        {/* Display form name or default */}
        <FormCreationHeading.FormName name={name} />
        {/* TODO: Status */}
        {/* {getStatusIndicator()} */}
        <FormCreationHeading.StepName name="Field Selection" />
        <FormCreationHeading.Description>
          Select fields from your data source to include in your form. You'll be
          able to configure field properties in the next step.
        </FormCreationHeading.Description>
        {unsupportedFields.length > 0 && (
          <FormCreationInfo>
            <p className="form-create-info-heading">
              The following fields cannot are autogenerated types and cannot be
              selected:
            </p>
            <ul className="form-create-info-text list-disc">
              {unsupportedFields.map((fieldOption) => (
                <li className="ml-4" key={fieldOption.id}>
                  {fieldOption.name} ({fieldOption.type})
                </li>
              ))}
            </ul>
          </FormCreationInfo>
        )}
      </FormCreationHeading>
      {/* Field Selection Section */}
      {/* TODO: Search function */}
      <FormLayout
        onSubmit={() => {
          form.handleSubmit();
        }}
      >
        <form.AppField
          name="selectedFields"
          children={(field) => (
            <div className="flex flex-col gap-4">
              <div className="flex flex-col gap-2">
                <div>
                  <field.FieldLabel>Available fields</field.FieldLabel>
                  <field.FieldDescription>
                    Click on fields to include or exclude them from your form.
                  </field.FieldDescription>
                </div>
                {/* Select/Deselect All Button */}
                <div className="flex gap-1">
                  {field.state.value.length !== fieldOptions.length ? (
                    <Button
                      variant="outline"
                      type="button"
                      onClick={() => {
                        const allSelectedFieldOptions: FormField[] =
                          fieldOptions.map((fieldOption) => ({
                            original: fieldOption,
                            isEditable: false,
                            isRequired: false,
                          }));
                        field.handleChange(allSelectedFieldOptions);
                      }}
                    >
                      <SquareCheckBig /> Select All
                    </Button>
                  ) : (
                    <Button
                      variant="outline"
                      type="button"
                      onClick={() => {
                        field.handleChange([]);
                      }}
                    >
                      <SquareCheckBig /> Deselect All
                    </Button>
                  )}
                  {/* Selected count */}
                  <Card className="py-2 text-sm rounded-md shadow-xs">
                    <CardContent className="px-4 py-0">
                      {field.state.value.length} selected /{" "}
                      {fieldOptions.length} total
                    </CardContent>
                  </Card>
                </div>
              </div>
              <div className="flex flex-col gap-2">
                {fieldOptions.length === 0 && (
                  <p className="text-muted-foreground">No fields found</p>
                )}
                {fieldOptions.map((fieldOption) => {
                  return (
                    <Label
                      className="border border-border p-4 rounded-lg data-[error=true]:text-destructive data-[error=true]:border-destructive/50"
                      data-error={!field.state.meta.isValid}
                      key={fieldOption.id}
                    >
                      <Checkbox
                        aria-invalid={!field.state.meta.isValid}
                        checked={field.state.value.some(
                          (selected) => selected.original.id === fieldOption.id,
                        )}
                        onCheckedChange={() => {
                          if (
                            field.state.value.some(
                              (selected) =>
                                selected.original.id === fieldOption.id,
                            )
                          ) {
                            // If already checked, uncheck it
                            const newState = field.state.value.filter(
                              (selected) =>
                                selected.original.id !== fieldOption.id,
                            );
                            field.handleChange(newState);
                          } else {
                            // Otherwise, include it in selectedFields
                            const newSelectedField: FormField = {
                              original: fieldOption,
                              isRequired: false,
                              isEditable: false,
                            };
                            field.handleChange([
                              ...field.state.value,
                              newSelectedField,
                            ]);
                          }
                        }}
                      />
                      <div className="flex flex-col">
                        <p className="font-semibold">{fieldOption.name}</p>
                        <p className="text-muted-foreground text-sm">
                          Type: {fieldOption.type}
                        </p>
                        <p className="text-muted-foreground text-sm">
                          ID: {fieldOption.id}
                        </p>
                      </div>
                    </Label>
                  );
                })}
              </div>
              <field.FieldErrors />
            </div>
          )}
        />
        <FormCreationButtons>
          <FormCreationBackButton to={previousRoute} />
          <FormCreationSubmitButton />
        </FormCreationButtons>
      </FormLayout>
    </FormCreationContent>
  );
};
